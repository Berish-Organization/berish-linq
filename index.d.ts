export declare class LINQ<T> {
    protected _items: T[];
    constructor(items: T[]);
    toArray(): T[];
    static fromArray<T>(items: T[]): LINQ<T>;
    copy(): T[];
    where(func: (item: T, index: number, linq: LINQ<T>) => boolean): LINQ<T>;
    take(count: number): LINQ<T>;
    skip(count: number): LINQ<T>;
    count(): number;
    count(func: (item: T, index: number, linq: LINQ<T>) => boolean): number;
    elementAt(id: number): T;
    elementAtOrNull(id: number): T;
    single(): T;
    single(func: (item: T, index: number, linq: LINQ<T>) => boolean): T;
    singleOrNull(): T;
    singleOrNull(func: (item: T, index: number, linq: LINQ<T>) => boolean): T;
    first(): T;
    first(func: (item: T, index: number, linq: LINQ<T>) => boolean): T;
    firstOrNull(): T;
    firstOrNull(func: (item: T, index: number, linq: LINQ<T>) => boolean): T;
    last(): T;
    last(func: (item: T, index: number, linq: LINQ<T>) => boolean): T;
    lastOrNull(): T;
    lastOrNull(func: (item: T, index: number, linq: LINQ<T>) => boolean): T;
    notNull(): LINQ<T>;
    notEmpty(): LINQ<T>;
    distinct<K>(): LINQ<T>;
    distinct<K>(func: (item: T, index: number, linq: LINQ<T>) => K): LINQ<T>;
    except(array: LINQ<T>): LINQ<T>;
    except(array: T[]): LINQ<T>;
    except(array: T[] | LINQ<T>): LINQ<T>;
    max(func: (item: T, index: number, linq: LINQ<T>) => number): number;
    min(func: (item: T, index: number, linq: LINQ<T>) => number): number;
    reverse(): LINQ<T>;
    average(): number;
    average(sumFunction: (item: T, index: number, linq: LINQ<T>) => number): number;
    average(sumFunction: (item: T, index: number, linq: LINQ<T>) => number, countFunction: (item: T, index: number, linq: LINQ<T>) => number): number;
    orderBy<K>(): LINQ<T>;
    orderBy<K>(func: (item: T) => K): LINQ<T>;
    forEach(func: (value: {
        item: T;
        index: number;
        linq: LINQ<T>;
    }) => void): LINQ<T>;
    orderByDescending<K>(): LINQ<T>;
    orderByDescending<K>(func: (item: T) => K): LINQ<T>;
    sum(): number;
    sum(func: (item: T, index: number, linq: LINQ<T>) => number): number;
    ofType(type: any): LINQ<T>;
    select<K>(func: (item: T, index: number, linq: LINQ<T>) => K): LINQ<K>;
    selectMany<K>(func: (item: T, index: number, linq: LINQ<T>) => K[]): LINQ<K>;
    groupBy<K>(func: (item: T, index: number, linq: LINQ<T>) => K): any;
    contains(value: T): boolean;
    containsAll(array: T[]): boolean;
    any(func: (item: T) => boolean): boolean;
    all(func: (item: T) => boolean): boolean;
    concat(array: T): LINQ<T>;
    concat(array: LINQ<T>): LINQ<T>;
    concat(array: T[]): LINQ<T>;
    intersect(array: LINQ<T>): LINQ<T>;
    intersect(array: T[]): LINQ<T>;
    intersect(array: T[] | LINQ<T>, func: (item: T, item2: T, id: number, id2: number) => boolean): LINQ<T>;
}
